{
    "titleNameMap": {
        "educationList": "教育背景",
        "workExpList": "工作经历",
        "projectList": "项目经历",
        "skillList": "个人技能",
        "awardList": "更多信息",
        "workList": "个人作品",
        "aboutme": "自我介绍"
    },
    "avatar": {
        "hidden": true
    },
    "profile": {
        "name": "李亦龙",
        "email": "xiaoheis1107@outlook.com",
        "mobile": "17673944870",
        "github": "",
        "zhihu": "",
        "workExpYear": "",
        "workPlace": "",
        "positionTitle": ""
    },
    "educationList": [
        {
            "edu_time": [
                "2020.09.01",
                "2024.06.30"
            ],
            "school": "华南理工大学",
            "major": "计算机科学与技术",
            "academic_degree": "本科",
            "dataIndex": 0
        }
    ],
    "awardList": [],
    "workExpList": [
        {
            "work_time": "2022.08.15~2023.07",
            "company_name": "广州荔支网络技术有限公司",
            "department_name": "运维部",
            "work_desc": "运维研发实习生 负责云原生平台的开发与运维",
            "dataIndex": 0
        }
    ],
    "skillList": [],
    "projectList": [
        {
            "project_time": "2022.08~2023.06",
            "project_name": "混合云IRock",
            "project_role": "后端开发",
            "project_desc": "混合云一个面向企业内部的私有云平台。提供业务基础设施的自助创建，管理等工作。在企业内部作为业务研发人员与运维基础设施的桥梁，提供计算、存储、网络等资源。依赖于IDC机房以及公有云，在企业内部提供类似于公有云平台的用户体验。",
            "project_content": "1. 将混合云平台接入公司内的通用计费系统，配合计费平台部门完善资源计费和成本分析\n2. 通过落地KubeVirt开源项目，基于K8S和KVM，以及KubeRouter网络插件，在IDC机房搭建私有弹性计算服务。接入混合云平台提供用户使用。\n3. 通过接入公有云平台的API，为混合云提供域名和DNS产品服务。\n4. 封装Nginx组件，为混合云提供ALB资源，用于业务接入。",
            "dataIndex": 0
        },
        {
            "project_time": "2023.01~2023.06",
            "project_name": "作业平台",
            "project_role": "后端开发",
            "project_desc": "作业平台由Golang语言开发，通过中心控制器，和分布在每台计算实例上的执行Agent实现简单的作业流程执行与调度。同时提供了和中心控制器集成在一起的简单脚本执行器，可用于执行Python、Shell脚本，或发起HTTP请求。提供定时任务执行和一次性执行两种执行模式（Cron和At模式）。使用Mysql作为任务记录和任务模版的存储，使用Redis实现任务的延迟队列以及执行缓存，并实现中心控制器注册和选主。",
            "project_content": "1. 使用Redis分布式锁机制实现中心控制器选主, 使用Redis ZSET实现定时任务执行的延迟队列。\n2. 通过Redis缓存待执行任务，实现高效的Worker任务抢占调度。\n3. 实现任务状态检查，实现执行超时检查逻辑。\n4. 在中心调度器集成简单的任务网关，用于Agent获取任务以及回报任务状态。"
        }
    ],
    "workList": [],
    "aboutme": {
        "aboutme_desc": "对docker、k8s、terraform等云原生工具有一定了解。有编写k8s operator和terraform provider的经验。\n熟悉Python编程基础，熟悉flask框架。\n熟悉Golang语言，有使用Goframe和Gin框架开发后端服务的经验。\n熟练掌握git版本控制软件的使用。\n熟悉SQL语言，熟悉MySQL的基本操作。\n熟悉linux操作系统的基本操作，了解操作系统底层知识。\n\n个人特点\n学习能力强，倾向于项目驱动学习。对操作系统，计算机网络等底层知识兴趣浓厚。"
    },
    "theme": {
        "color": "#2f5785",
        "tagColor": "#8bc34a"
    }
}